{
  "repository": {
    "web": "http://github.com/Joose/Joose/tree",
    "url": "git://github.com/Joose/Joose.git",
    "type": "git"
  },
  "bin": {
    "joose-server": "bin/joose-server.js",
    "joose-nodify": "bin/joose-nodify.js"
  },
  "directories": {
    "man": "./man",
    "lib": "./lib",
    "doc": "./doc/mmd"
  },
  "version": "3.50.0",
  "dependencies": {
    "optimist": "*",
    "detective": ">= 0.0.3",
    "temp": "*"
  },
  "name": "joose",
  "author": {
    "name": "Nickolay Platonov",
    "email": "nplatonov@cpan.org"
  },
  "description": "Post modern self-hosting meta object system for JavaScript with support for classes, inheritance, roles, traits, method modifiers and more.",
  "main": "joose-all.js",
  "homepage": "http://github.com/Joose/Joose/tree",
  "contributors": [
    {
      "name": "Malte Ubl"
    },
    {
      "name": "Jeremy Wall"
    }
  ],
  "man": [],
  "readme": "Name\n====\n\nJoose - A postmodern class system for JavaScript\n\n\nSYNOPSIS\n========\n\nIn browsers (see [Manual.Installation](Joose/Manual/Installation.html)):\n        \n        <script type=\"text/javascript\" src=\"/jsan/Task/Joose/Core.js\"></script>\n\nThen:\n\n        Class(\"Point\", {\n        \n            has: {\n                x: {is: \"ro\"},\n                y: {is: \"rw\"},\n            },\n            \n            methods: {\n                clear: function () {\n                    var x = this.getX()\n                    this.setY(0)\n                }\n            }\n        })\n        \n        Class(\"Point.ThreeD\", {\n        \n            isa: Point,\n            \n            has: {\n                z: {}\n            },\n            \n            after: {\n                clear: function () {\n                    this.z = 0\n                }\n            }\n        })\n        \n        var point = new Point.ThreeD({\n            x : 1,\n            y : 2,\n            z : 3\n        })\n\nIn NodeJS:\n\n        var Class = require('joose').Class\n        \n        var Point = exports.Point = Class({\n            has: {\n                x: {is: \"ro\"},\n                y: {is: \"rw\"},\n            },\n            \n            methods: {\n                clear: function () {\n                    var x = this.getX()\n                    this.setY(0)\n                }\n            }\n        })\n\n\n        exports.Point3D = Class({\n        \n            isa: Point,\n            \n            has: {\n                z: {}\n            },\n            \n            after: {\n                clear: function () {\n                    this.z = 0\n                }\n            }\n        })\n\n\n\nDESCRIPTION\n===========\n\nJoose is a self-hosting meta object system for JavaScript with support for classes, inheritance, roles (aka traits), method modifiers and much more.\n\nThe main goal of Joose is to make JavaScript Object Oriented Programming easier, more consistent and less tedious. With Joose you can to think more about what you want to do and less about the mechanics of OOP.\n\nThe Joose framework has been successfully used in multiple production systems for twelve months now and has been proven to be very stable. \nJoose is being tested using an automated unit-test suite that is being run in all major browsers (Firefox, IE, Safari, Opera and Chrome) and on NodeJS server-side platform.\n\nJoose core package is only 8kb (YUI+gz).\n\n\nNew to Joose?\n-------------\n\nIf you're new to Joose, the best place to start is the [Joose.Manual][1] docs, followed by the [Joose.Cookbook][2]. The intro will show you what Joose is, and how it makes JavaScript OO better.\n\nThe cookbook recipes on Joose basics will get you up to speed with many of Joose's features quickly. Once you have an idea of what Joose can do, you can use the API documentation to get more detail on features which interest you.\n\n\n \nBUILDING CLASSES WITH JOOSE\n===========================\n\nJoose makes every attempt to provide as much convenience as possible during class construction/definition, but still stay out of your way if you want it to. Here are a few items to note when building classes with Joose.\n\n- Unless specified with 'isa', any class which uses Joose will inherit from Joose.Meta.Object.\n\n\nPROVIDED INSTANCE METHODS\n=========================\n\nJoose provides a number of methods to all your classes, mostly through the inheritance from Joose.Meta.Object.\n\n  - `this.SUPER(arg1, arg2, ...)`\n\nOnly valid in the scope of usual methods and OVERRIDE method modifiers. Calls a superclass's method with the arguments provided.\n\n  - `this.SUPERARG(Array arg)`\n\nOnly valid in the scope of usual methods and OVERRIDE method modifiers. Calls a superclass's method with the \"packed\" arguments, provided as array. Usually used as: `this.SUPERARG(arguments)`\nThis method is just a shortcut for `this.SUPER.apply(this, arguments)`\n\n  - `this.BUILD([Object arg])`\n\nDefault `BUILD` method checks whether the 1st argument passed to it is an Object. If so, it passes it to `initialize` method. This method also optionally *detaches* current instance. \nSee [Joose.Manual.Traits][traits] for details.\n\n  - `this.initialize(Object properties)`\n\nDefault `initialize` method uses `properties` to initialize the attributes of current instance.\n\n  - `this.toString()`\n\nDefalt string coercion is string \"a ClassName\", where ClassName is a name of instance's class.\n \n\nPROVIDED INSTANCE PROPERTIES\n============================\n\nJoose provides a number of properties to all instances of your classes.\n\n  - `this.constructor`\n\nA class with which `this` instance was constructed.\n\n  - `this.meta`\n\nAn instance of metaclass for `this` instance's class. \n\n\nPROVIDED CLASS PROPERTIES\n============================\n\nJoose also provides a number of properties to classes.\n\n  - `class.meta`\n\nAn instance of metaclass for this class. The same as `this.meta` for instances of `class`\n\n  - `class.my`\n\nA static instance. See [Joose.Manual.Static][6] for more details.\n\n  - `class.superClass`\n\nA superclass (constructor function) of given `class`\n    \n    \nPROVIDED HELPERS\n================\n\nDeclaration helpers\n-------------------\n\nDeclaration helpers allows you to declare a class, role or module.\n\n  - `Class(String name, Object builders)`\n  \nDeclares a class, using provided builders. `name` will be transformed into class's constructor. See the details [here][construction]\n\n  - `Class(Object buildersObj)`\n  \nDeclares an anonymous class.\n  \n  - `Role(String name, Object builders)`\n\n  - `Role(Object buildersObj)`\n  \nThe same helpers for Roles. See [Roles][roles].\n\n  - `Module(String name, Object builders)`\n\n  - `Module(String name, Function body)`\n\nThe same helpers for Modules. See the details [here][construction]\n\n\nJoose also provides a number of small helpers functions, which you might found useful. \n\nHelpers for Arrays\n------------------\n\n  - `Joose.A.each(array, func, scope)`\n\nCalls a `func` in the optional `scope` for each element of `array` as: `func(element, index)`, where `index` is the index of element in the `array`. Returning a `false` from `func` stops the iteration.\nIf the iteration were stopped with returned `false` value, this helper also return `false`. Otherwise it returns undefined value.\n\n  - `Joose.A.map(array, func, scope)`\n\nCalls a `func` in the optional `scope` for each element of `array` as: `func(element, index)`, where `index` is the index of element in the `array`. \nReturning values from all calls to `func` are collected in the resulting array, which is returned. \n\n  - `Joose.A.exists(array, value)`\n\nReturns boolean value, indicating whether this `value` is exists in the `array`.\n    \n  - `Joose.A.grep(array, func)`\n\nCalls the `func` for each element of `array` and returns an array, consisted from only those elements, for which it returns 'true' value\n\n  - `Joose.A.remove(array, removeEle)`\n\nReturns a \"shallow copy\" of `array`, without the all the occurrences of `removeEle` (if any). Comparison is performing with '===' operator. Do not modifies original `array`.\n    \n\nHelpers for Strings\n------------------\n\n  - `Joose.S.saneSplit(str, delimeter)`\n\nImplements a perl-like 'split', which returns empty array for splitted empty string (not an array with an empty string). Behave as standard `String.prototype.split` in other aspects.\n\n  - `Joose.S.uppercaseFirst(string)`\n\nReturns a copy of `string`, with uppercased first letter.\n    \n\nHelpers for Objects\n------------------\n\n  - `Joose.O.each(object, func, scope)`\n\nCalls a `func` in the optional `scope` for *all* properties of the `object` (*including* inherited via prototype chain). \n`func` is called as: `func(value, name), where `value` is the value of the `name` property of `object`. Returning a `false` from `func` stops the iteration.\nIf the iteration were stopped with returned `false` value, this helper also return `false`. Otherwise it returns undefined value.\n\n  - `Joose.O.eachOwn(object, func, scope)`\n\nCalls a `func` in the optional `scope` for only \"own\" properties of the `object`. `func` is called as: `func(value, name), where `value` is the value of the `name` property of `object`.\nReturning a `false` from `func` stops the iteration. If the iteration were stopped with returned `false` value, this helper also return `false`. Otherwise it returns undefined value.\n    \n  - `Joose.O.copy(source, target?)`\n\nCopies *all* the properties of `source` object to the `target` (which is created as empty object if not supplied). (*including* inherited via prototype chain). Returns `target`. \n\n  - `Joose.O.copyOwn(source, target?)`\n\nCopies only the \"own\" properties of `source` object to the `target` (which is created as empty object if not supplied).. Returns `target`. \n    \n  - `Joose.O.getMutableCopy(object)`\n\nReturns a \"mutable copy\" of `object`. \"Mutable copy\" is an empty object, which however inherit all the properties of original via prototype chain.\n\n  - `Joose.O.extend(target, source)`\n\nCopies all the properties of `source` object to the `target` (*including* inherited via prototype chain). \n    \n  - `Joose.O.isEmpty(object)`\n\nReturns boolean value, indicating whether the `object` have no *own* properties.\n    \n  - `Joose.O.isInstance(obj)`\n\nReturns boolean value, indicating whether the passed `obj` is an instance of some Joose class.\n    \n  - `Joose.O.wantArray(obj)`\n\nReturns `obj` itself if `obj` is an array, or `[ obj ]` otherwise.\n\n\nHelpers for Attributes declaration\n----------------------------------\n\nTo simplify declaration of attributes Joose provides a number of default attributes initializers (see [Joose.Manual.Attributes][4] for details)\n\n - `Joose.I.Array`\n\nReturns empty Array when called\n\n - `Joose.I.Object`\n\nReturns empty Object when called\n\n- `Joose.I.Function`\n\nReturns empty Function when called (which in turn will return Joose.I.Function)\n\n- `Joose.I.Now`\n\nReturns new instance of `Date` (at the time of class instantiation)\n\n\nCONFIGURATION\n=============\n\nYou can provide some configuration options to Joose. To specify them before Joose has been loaded, create a global `JOOSE_CFG` object. At the time of Joose loading, it will alias it as `Joose.C` symbol.\n\n`Joose.C` is the place, where various extension will check for configuration options.\n\n\n\nMETACLASS\n=========\n\nWhen you use Joose, you can specify which metaclass to use:\n\n        Class(\"Point\", {\n        \n            meta : NewMetaClass,\n            ....\n        })\n\n\nYou can also specify traits which will be applied to your metaclass:\n\n        Class(\"Point\", {\n        \n            trait : TraitWithCustomBuilder,\n        \n            coords : [ 1, 2, 3 ]\n            \n            ....\n        })\n\nWhen you do this, your class's meta object will have the specified traits applied to it. See [Joose.Manual.Roles][5] and [Joose.Manual.Traits][traits] for further details.\n    \n\nThe JooseX. namespace\n=====================\n\nGenerally if you're writing an extension for Joose itself you'll want to put your extension in the JooseX. namespace. This namespace is specifically for extensions that make Joose better or different in some fundamental way. \nIt is traditionally not for a package that just happens to use Joose. \n\nThese extensions can be found in the [npm registry][3]. See [Joose.Manual.JooseX][7] for more details.\n\n\n<div style=\"display:none\">\n\nCAVEATS\n=======\n\nRefering to meta instance from the constructor\n\nMethod modifiers order in Rhino\n\n</div>\n\n\nGETTING HELP\n============\n\nWe offer a mailing list and an active IRC channel.\n\nThe mailing list is <a href=\"mailto:joose-js@googlegroups.com\">joose-js@googlegroups.com</a>. To subscribe, visit: <http://groups.google.com/group/joose-js>\n\nYou can also visit us at [#joose](http://webchat.freenode.net/?randomnick=1&channels=joose&prompt=1) on freenode. Questions at all levels (on Joose-related topics ;) are welcome.\n\n\nACKNOWLEDGEMENTS\n================\n\nMany thanks to the whole Moose community for being icebreaker in the meta world. \n\nSpecial thanks to Dave Rolsky for the excellent Moose documentation written, on which this document is based.\n\n\nSEE ALSO\n========\n\n<http://joose.it> - This is the official web home of Joose.\n\n<http://github.com/Joose/Joose> - Our version control repository\n\n<http://www.iinteractive.com/moose> - Home page of Moose - post-modern class system for perl\n\nBUGS\n====\n\nAll complex software has bugs lurking in it, and this module is no exception.\n\nPlease report any bugs through the web interface at <https://github.com/Joose/Joose/issues>\n\n\nFEATURE REQUESTS\n================\n\nWe are very strict about what features we add to the Joose core, especially the user-visible features. Instead we have made sure that the underlying meta-system of Joose is as extensible as possible so that you can add your own features easily.\n\nThat said, occasionally there is a feature needed in the meta-system to support your planned extension, in which case you should \neither email the mailing list ([joose-js@googlegroups.com](mailto:joose-js@googlegroups.com)) or join us on IRC at <irc://irc.freenode.org/#joose> to discuss. \nThe [Joose.Manual.Contributing][8] has more detail about how and when you can contribute.\n\n\nAUTHORS\n=======\n\nMalte Ubl \n\nJeremy Wall\n\nNickolay Platonov\n\n\n\nCOPYRIGHT AND LICENSE\n=====================\n\nCopyright (c) 2008-2011, Malte Ubl, Nickolay Platonov\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n* Neither the name of Malte Ubl nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. \n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \n\n\nDocumentation is based on original Moose::Manual documentation, copyright 2006-2009 by Infinity Interactive, Inc.\n\n\n[1]: Joose/Manual.html\n[2]: Joose/Cookbook.html\n[3]: http://npmjs.org\n[4]: Joose/Manual/Attributes.html\n[5]: Joose/Manual/Roles.html\n[6]: Joose/Manual/Static.html\n[7]: Joose/Manual/JooseX.html\n[8]: Joose/Manual/Contributing.html\n\n[construction]: Joose/Manual/Construction.html\n[traits]: Joose/Manual/Traits.html\n[roles]: Joose/Manual/Roles.html\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Joose/Joose/issues"
  },
  "_id": "joose@3.50.0",
  "_from": "joose@3.50.0"
}
