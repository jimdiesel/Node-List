{
  "name": "choreographer",
  "version": "0.3.0",
  "description": "Your server is my stage -- dirt simple URL routing for Node.js. Easy to use, easy to understand. Sinatra-style API.",
  "homepage": "http://github.com/laughinghan/choreographer#readme",
  "author": {
    "name": "Han",
    "email": "laughinghan@gmail.com",
    "url": "http://github.com/laughinghan"
  },
  "main": "./choreographer",
  "engines": [
    "node"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/laughinghan/choreographer.git"
  },
  "scripts": {
    "start": "node server.js"
  },
  "readme": "Choreographer\n=============\n\nYour server is my stage -- dirt simple URL routing for Node.js. Easy to use,\neasy to understand. Sinatra-style API.\n\n(This has been tested with Node.js v0.2.0-v0.4.8. Should work with all\nsubsequent versions too.)\n\nInstall\n-------\n\nGet [npm](http://github.com/isaacs/npm#readme) if you don't already have it,\nand then just run `npm install choreographer`.\n\nUsage\n-----\n\nDirt simple:\n\n    var http = require('http'),\n      router = require('choreographer').router();\n    \n    router.get('/chatroom/*/messages', function(req, res, room) {\n      res.writeHead(200, {'Content-Type': 'text/plain'});\n      res.end('No messages in ' + room + '.\\n');\n    })\n    .post('/chatroom/*/message', function(req, res, room) {\n      res.writeHead(200, {'Content-Type': 'text/plain'});\n      res.end('Posted message to ' + room + '.\\n');\n    })\n    .notFound(function(req, res) {\n      res.writeHead(404, {'Content-Type': 'text/plain'});\n      res.end('404: This server is just a skeleton for a chat server.\\n' +\n        'I\\'m afraid ' + req.url + ' cannot be found here.\\n');\n    });\n    \n    http.createServer(router).listen(80);\n\nRoutes are easily made case-insensitive with the optional `ignoreCase` flag:\n\n    router.get('/HelloWorld', true, function(req, res) {\n      res.writeHead(200, {'Content-Type': 'text/plain'});\n      res.end('Hello, World!\\n');\n    });\n\nRoutes default to case-sensitive without the flag, but you can change that:\n\n    //routes defined up 'til now defaulted to case-sensitive if flag omitted\n    router.ignoreCase = true;\n    //routes defined following default to case-insensitive if flag omitted\n\nA star `*` in a route matches anything up to a slash `/`, but if you want to\nmatch slashes too you can simply use two stars `**`:\n\n    router.get('/static/**', function(req, res, path) {\n      serveStaticFiles(path); //path could be 'file.ext' or 'folders/file.ext'\n    });\n\nMost flexibly, regular expressions may also be used as routes:\n\n    router.get(/^\\/hw(\\d+)$/i, function(req, res, hwNum) {\n      res.writeHead(200, {'Content-Type': 'text/plain'});\n      res.end('Homework '+hwNum+' isn\\'t available yet.\\n');\n    });\n\nThere's also `put`, `delete`, `head`, `trace`, `options`, and `connect`, and\nthat's it! That's the entire API, short and sweet.\n\nAs in Sinatra, routes are first-come, first-serve (only the callback for the\nfirst route to be matched by a request is invoked, and routes are matched in\nthe order they are defined). Also as in Sinatra, creating `get` routes\nautomatically creates `head` routes.\n\nChoreographer has to [parse][] the URL to match the routes (obviously). For\nconvenience, the `.parsedUrl` property on the [http.ServerRequest][req] object\nis set to the [parsed URL object][parsedURL] so you needn't re-parse the URL\n(unless that property is already set to a parsed URL object, in which case,\nChoreographer will just use that object).\n\n[parse]: http://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost\n[req]: http://nodejs.org/api/http.html#http_class_http_serverrequest\n[parsedURL]: http://nodejs.org/api/url.html#url_url\n\nNotice that `router` is just an event listener for the `request` event on\n`http.createServer`, so if you want a listener that does more than routing:\n\n    http.createServer(function(req, res) {\n      //do middleware stuff before routing\n      router.apply(this, arguments);\n      //do more stuff\n    }).listen(80);\n\nUnderstanding The Code\n----------------------\n\nThe code is just as simple: first half is the router, second half is the\nroutes. Lightweight and easy to understand.\n\nThe entire architecture is designed around the philosophy of being so simple\nit obviously has no bugs, rather than so complicated it has no obvious bugs.\n\nOpen-Source License\n-------------------\n\n[GNU Lesser General Public License](http://www.gnu.org/licenses/lgpl.html)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/laughinghan/choreographer/issues"
  },
  "_id": "choreographer@0.3.0",
  "_from": "choreographer@0.3.0"
}
